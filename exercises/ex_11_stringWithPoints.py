"""
Есть строка, которая состоит из точек.
Нужно их перевести в другую систему исчисления.

К примеру, . -> .
.. -> :
… -> :.
…. -> ::
"""

"""
Чтобы перевести строку, состоящую из точек, в другую систему исчисления, 
можно использовать следующий алгоритм:

1) Создать словарь, где ключами будут символы входной системы исчисления, 
а значениями будут символы выходной системы исчисления.
2) Итерироваться по символам входной строки и заменять каждый символ 
на соответствующий символ в выходной системе исчисления, используя словарь.
3) Возвращать новую строку, полученную в результате замены символов.
"""


"""
m = s.length / 2;
1..m -> “:”
if s.length % 2 -> .
"""

def convert_dots(s):
    dot_dict = {
        '.' : '.',
        '..' : ':',
        '...' : ':.',
        '....': '::',
        '.....' : ':.:'
    }

    out = ''

    while s:
        for k in dot_dict.keys():
            if s.startswith(k):
                out += dot_dict[k]
                s = s[len(k):]
                break
        else:
            raise ValueError('Please enter a valid string!')

    return out

"""
В этой реализации передается строка s, состоящая из точек, 
которую нужно преобразовать. Создается словарь dot_dict, 
содержащий соответствие символов входной системы 
исчисления и символов выходной системы исчисления. 
Затем создается пустая строка out, в которую будут 
добавляться символы новой системы исчисления.

Далее начинается цикл while, который будет выполняться, 
пока входная строка не закончится. На каждой итерации цикла 
происходит поиск наибольшей подстроки в словаре dot_dict, 
которая начинается с начала входной строки s. 

Если такая подстрока найдена, то соответствующий 
символ выходной системы исчисления добавляется в строку out, 
а соответствующее количество символов удаляется 
из начала строки s. Если подходящая подстрока не найдена, 
то выбрасывается исключение ValueError.

После окончания цикла while функция возвращает новую 
строку out, содержащую символы новой системы исчисления.
"""

input_str = '.....'
output_str = convert_dots(input_str)
print(output_str) # prints '::'

input_str = '...'
output_str = convert_dots(input_str)
print(output_str) # prints ':.'

input_str = '..'
output_str = convert_dots(input_str)
print(output_str) # prints ':'

##### optimized #####

def convert_dots_adj(s):
    m = len(s) // 2  # calculate the midpoint
    out = ':' * m  # repeat ':' m times
    if len(s) % 2 == 1:
        out += '.'  # add a '.' if the length is odd
    return out

input_str = '.....'
output_str = convert_dots_adj(input_str)
print(output_str) # prints '::'


